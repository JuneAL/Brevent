apply plugin: 'com.android.application'

def getBreventVersion = { ->
    def tag = 'git describe --tags --always'.execute().text.trim()
    if (tag.startsWith('v')) {
        tag = tag.substring(1)
    }
    if ('git diff --no-ext-diff --quiet HEAD'.execute().waitFor() == 0) {
        return tag
    } else {
        return tag + '-dirty'
    }
}

android {
    compileSdkVersion rootProject.targetSdkVersion
    buildToolsVersion '28.0.2'

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (rootProject.file('ant.properties').exists()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(rootProject.file('ant.properties')))

        defaultConfig {
            applicationId "me.piebridge.brevent"
            versionName getBreventVersion()
            buildConfigField 'boolean', 'RELEASE', properties['build.release']
            buildConfigField 'String', 'DONATE_ALIPAY', properties['build.alipay']
            buildConfigField 'String', 'DONATE_PAYPAL', properties['build.paypal']
            buildConfigField 'String', 'DONATE_WECHAT', properties['build.wechat']
            buildConfigField 'byte[]', 'DONATE_PLAY', properties['build.play']
            buildConfigField 'String', 'FEEDBACK', properties['build.feedback']
            buildConfigField 'String', 'EMAIL', properties['build.email']
            buildConfigField 'String', 'PROJECT', properties['build.project']
            resConfigs 'en', 'zh-rCN', 'zh-rTW'
        }

        signingConfigs {
            release {
                storeFile file(properties['key.store'])
                storePassword properties['key.store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.alias.password']
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            debug {
                signingConfig signingConfigs.release
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                if (variant.buildType.name == 'release') {
                    output.outputFile = rootProject.file("br-v${variant.versionName}.apk")
                }
            }
        }
    } else {
        defaultConfig {
            buildConfigField 'boolean', 'RELEASE', 'false'
            buildConfigField 'String', 'DONATE_ALIPAY', 'null'
            buildConfigField 'String', 'DONATE_PAYPAL', 'null'
            buildConfigField 'String', 'DONATE_WECHAT', 'null'
            buildConfigField 'byte[]', 'DONATE_PLAY', 'null'
            buildConfigField 'String', 'FEEDBACK', 'null'
            buildConfigField 'String', 'EMAIL', 'null'
            buildConfigField 'String', 'PROJECT', 'null'
        }
    }

    sourceSets {
        main {
            jni.srcDirs = []
            if (!project.gradle.startParameter.taskRequests?.empty) {
                jniLibs.srcDirs = ['src/main/libs']
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    defaultConfig {
        minSdkVersion = 23
    }

    if (project.gradle.startParameter.taskRequests?.empty) {
        // for ide
        externalNativeBuild {
            ndkBuild {
                path 'src/main/jni/Android.mk'
            }
        }
    }


    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64'
            universalApk true
        }
    }
}

dependencies {
    implementation "com.android.support:support-core-ui:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:support-v13:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:cardview-v7:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.supportLibraryVersion}"
    implementation "com.android.support:design:${rootProject.supportLibraryVersion}"
    implementation project(':donation')
    implementation project(':log-reader-jni')
    implementation project(':brevent-override')
    implementation project(':brevent-override-m')
    compileOnly project(':log-reader')
    implementation 'eu.chainfire:libsuperuser:1.0.0.201608240809'
}

//def hiddenApi = files(project(':hidden-api').file('build/intermediates/bundles/default/classes.jar'))
def hiddenApi = files(project(':hidden-api').file('build/intermediates/packaged-classes/debug/classes.jar'))

if (project.gradle.startParameter.taskRequests?.empty) {
    // for ide, aar cannot be provided
    dependencies {
        implementation project(':hidden-api')
    }
} else {
    // for proguard
    dependencies {
        implementation hiddenApi
    }
}

task renameBootstrap {
    doLast {
        rootProject.abiFilters.each { abi ->
            copy {
                from file("src/main/libs/${abi}/bootstrap")
                into "src/main/libs/${abi}"
                rename { 'libbootstrap.so' }
            }
            delete file("src/main/libs/${abi}/bootstrap")
        }
    }
}

task copyLoader {
    doLast {
        fileTree("build/intermediates/transforms/stripDebugSymbol").visit { details ->
            if (details.name == "lib") {
                rootProject.abiFilters.each { abi ->
                    copy {
//                        from fileTree(dir: project(':loader').file('build/intermediates/transforms/dex/release'), include: ['**/*.dex']).asPath
                        from fileTree(dir: project(':loader').file('build/intermediates/transforms/dexMerger/release'), include: ['**/*.dex']).asPath
                        rename { 'libloader.so' }
                        into file("${details.file}/${abi}")
                    }
                }
                details.stopVisiting()
            }
        }
    }
}

task buildBootstrap(type: Exec) {
    commandLine "${android.ndkDirectory}\\ndk-build.cmd",
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk'
}

buildBootstrap.finalizedBy renameBootstrap

task cleanBootstrap(type: Exec) {
    commandLine "${android.ndkDirectory}\\ndk-build.cmd",
            '-C', file('src/main/jni').path,
            'APP_BUILD_SCRIPT=Android.mk',
            'NDK_APPLICATION_MK=Application.mk',
            'clean'
}

task deleteNativeBuild(type: Delete) {
    delete file('.externalNativeBuild')
}

tasks.whenTaskAdded { task ->
    if (task.name == 'transformNativeLibsWithStripDebugSymbolForRelease' || task.name == 'transformNativeLibsWithStripDebugSymbolForDebug') {
        task.finalizedBy copyLoader
    }
}

tasks.withType(JavaCompile) { compileTask ->
    compileTask.dependsOn buildBootstrap
    compileTask.dependsOn ':loader:packageRelease'
    doFirst {
        options.compilerArgs << '-Xbootclasspath/p:' + hiddenApi.asPath
    }
}

clean.dependsOn cleanBootstrap
clean.dependsOn deleteNativeBuild
